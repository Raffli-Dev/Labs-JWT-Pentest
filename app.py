from flask import Flask, render_template, request, make_response, redirect, url_for
import jwt
import datetime
import hmac
import hashlib
import base64
from dotenv import load_dotenv
import os

load_dotenv()

app = Flask(__name__)

app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
app.config['JWT_ISSUER'] = os.getenv('JWT_ISSUER')
app.config['JWT_AUDIENCE'] = os.getenv('JWT_AUDIENCE')

def base64url_encode(data):
    """Helper function to encode data into base64url format."""
    return base64.urlsafe_b64encode(data).rstrip(b'=')

def verify_signature_manually(token, secret_key):
    """Manually verify JWT signature using HMACSHA256."""
    try:
        header, payload, signature = token.split('.')
    except ValueError:
        return False

    message = f"{header}.{payload}".encode('utf-8')

    secret_key_bytes = secret_key.encode('utf-8')
    hmac_signature = hmac.new(secret_key_bytes, message, hashlib.sha256).digest()

    expected_signature = base64url_encode(hmac_signature).decode('utf-8')

    return hmac.compare_digest(expected_signature, signature)

@app.route('/', methods=['GET'])
def home():
    return render_template('index.html')

@app.route("/comment", methods=['GET', 'POST'])
def comment():
    if request.method == 'POST':
        komentar = request.form['komentar']
        
        token = jwt.encode({
            'role': 'role_user',       
            'iss': app.config['JWT_ISSUER'],
            'aud': app.config['JWT_AUDIENCE'],
            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1)
        }, app.config['SECRET_KEY'], algorithm="HS256")
        
        resp = make_response(redirect(url_for('comment', komentar=komentar)))
        resp.set_cookie('session', token)
        return resp

    token = request.cookies.get('session')
    komentar = request.args.get('komentar')
    if not token:
        return render_template('index.html', comment="No JWT token found in cookies.", komentar=komentar)

    if not verify_signature_manually(token, app.config['SECRET_KEY']):
        return render_template('index.html', comment="Invalid Token. Signature verification failed.", komentar=komentar)

    try:
        data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"],
                          issuer=app.config['JWT_ISSUER'], audience=app.config['JWT_AUDIENCE'])

        if data['role'] == 'role_admin':
            flag = "Administrator Access: You have the flag! Flag: flag{BHInekA_2623Jaksa}"
            return render_template('index.html', comment=flag)
    except jwt.ExpiredSignatureError:
        return render_template('index.html', comment=komentar)
    except jwt.InvalidTokenError:
        return render_template('index.html', comment=komentar)

    return render_template('index.html', comment=komentar)

if __name__ == '__main__':
    app.run('0.0.0.0', port=5000, debug=True)
