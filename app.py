from flask import Flask, redirect, url_for, render_template, request, jsonify, make_response
import jwt
import datetime

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret1'

# Home route
@app.route('/', methods=['GET'])
def home():
    return render_template('index.html')

# Comment khusus JWT Hadling
@app.route("/comment", methods=['GET', 'POST'])
def comment():
    if request.method == 'POST':
        comment = request.form['comment']
        
        token = jwt.encode({ 
            'role': 'role_user',       
            'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=5)
        }, app.config['SECRET_KEY'], algorithm="HS256")
        
        
        resp = make_response(render_template('comment.html', comment=comment))
        resp.set_cookie('session', token)  
        return resp
    
    token = request.cookies.get('jwt') 
    if not token:
        return render_template('comment.html', comment="No JWT token found in cookies.")

    try:
        # Decode the JWT from the cookie
        data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
        
        # Check if the user is an administrator
        if data['role'] == 'role_admin':
            print("Flag: flag{BH283AssJJ_AssawqjdewdfJask}")  # Display flag in console
            return render_template('comment.html', comment="Administrator Access: You have the flag!")
    except jwt.ExpiredSignatureError:
        return render_template('comment.html', comment="Token has expired. Please submit a new comment.")
    except jwt.InvalidTokenError:
        return render_template('comment.html', comment="Invalid Token. Please try again.")
    
    return render_template('comment.html', comment="Welcome! You are a regular user.")

# Flag route to test cookie-based JWT handling
@app.route("/comment/flag", methods=['GET'])
def flag():
    # Read JWT from cookie
    token = request.cookies.get('jwt')
    if not token:
        return jsonify({"error": "Token missing"}), 400

    try:
        # Decode the JWT
        data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
        # Check for administrator role in the token
        if data['role'] == 'role_admin':
            return jsonify({"msg": "flag{BH283AssJJ_AssawqjdewdfJask}"})
        else:
            return jsonify({"msg": "You are not an administrator."})
    except jwt.ExpiredSignatureError:
        return jsonify({"error": "Token has expired"}), 401
    except jwt.InvalidTokenError:
        return jsonify({"error": "Invalid Token"}), 400

# Main function to run the app
if __name__ == '__main__':
    app.run('0.0.0.0', port=5000, debug=True)
